Simple CSV (comma-separated values) format parser for Perl 6.

  use v6;
  use Text::CSV;

  say Text::CSV.parse-file('somefile.csv').perl;
  say Text::CSV.parse("foo,bar\nbaz,boo").perl;

Oh, and the C<parse> methods take the following named parameters:

    :trim        Removes whitespace on both ends of each value.

    :skip-header Causes the first line not to be included in the output.

    :strict      Throws an error if a row has a different number of columns
                 than the previous ones.

    :output      Determines the shape of the returned data structure.
                 Allowed values are 'arrays' (the default), 'hashes',
                 and any type object (i.e. ':output(MyType)').
                 When the value is 'hashes' or a type object, the first line
                 is assumed to be a special header line, the values on that
                 line are used as hash keys, and :skip-header is suppressed.

    :quote       Use a character for quoting other than the default of double
                 quote '"'. Must be a single, non-space character.

    :separator   Use a separator character other than the default of comma ','
                 Must be a single non new-line character.

If you see yourself regularly contravening the defaults of one or more of
these parameters, it might be a good idea to instantiate the Text::CSV
class, giving it the default values you want:

  my $parser = Text::CSV.new( :output<hashes>, :!strict );
  my Hash[Str] @hashes = $parser.parse-file('somefile.csv');



Text::CSV also exports a subroutine: C<csv-write-file>, to write CSV data out
to a file. C<csv-write-file> supports all of the internal CSV representations
provided by Text::CSV.parse. 

There are two mandatory parameters: a filename, and an array of CSV data in
one of the configurations provided by the .parse method (Array of Array, Array
of Hash or Array of Object).

  use v6;
  use Text::CSV;

  my @csv = Text::CSV.parse-file('somefile.csv');
  csv-write-file( @csv, :file('/path/to/output.csv') );

There are a few other parameters which may be useful or necessary depending on
your needs and data.

    :header     An array of strings to use as the first (header) line in the
                written file. Mandatory for hash or object modes. Optional for
                Array mode.

    :quote      Uses a character other than double quote for the quoting.
                character.

    :separator  Use a character other than comma for the separator character.


== License

This module is released under Artistic 2.0. See LICENSE.
